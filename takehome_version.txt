## Background ##

# Your engineering team has a table of customer accounts in a SQL table, and
# your sales team has the same customer accounts in some third party tool.
#
# You're trying to create some automation on the engineering side based on
# customers as they move through the sales pipeline.
#
# In order to do that, you first need to link the accounts in the third party
# tool to the accounts that engineering keeps track of.
#
# You already wrote the boilerplate to interface with SQL and the third party
# tool, you just need to figure out how to do the pairings.

## Task ##

##############################################################################
# Part 0
##############################################################################
#
# Given two inputs `left` and `right`, return an output `pairings`...
#
# Where:
# - Each item in `left` and `right` contain the following:  row_id, account_name ]
# - And each item in `pairings` contains: [ left_row_id, right_row_id ]
#
# Assume:
# - Both sides are the same size
# - There are no duplicates
# - You can choose the data structures for `left`, `right`, and `pairings`, I only give suggestions
# - I'll update the question with a few complications along the way
# - Don't optimize for time complexity
# - Don't spend too much time on this, it's mostly setup for the following parts
    

## Inputs ##
left = [
    (1, 'AT&T'),
    (2, 'Verizon')
]
right = [
    (8, 'Verizon'),
    (9, 'AT&T')
]

## Expected output ##
expected = [
    (2, 8),
    (1, 9)
]

##############################################################################
## Part 1 ##
##############################################################################

# Account names are no longer an exact string match

# Assume:
# - There are no items in left that don't match with an item in right, vice versa
# - One of the two items is always a substring of the other
# - Either the left or the right can be the substring


## Inputs ##
left = [
    (1, 'AT&T Mobility LLC'),
    (2, 'Verizon')
]
right = [
    (8, 'Verizon Wireless'),
    (9, 'AT&T')
]

## Expected output ##
expected = [
    (2, 8),
    (1, 9)
]

##############################################################################
## Part 2 ##
##############################################################################

# Substring is no longer sufficient

# Let's talk this through before writing anything out


## Edit Distance ##

# Assume you've decided to use Levenshtein/edit distance (actually ratio)
#
# In practice we'd import a library and read the documentation.
#
# For the sake of this question, the distances between all pairs of strings is provided.
#
# Fields are:
# - [ left_id, right_id, similarity, left_name, right_name ]

## Edit distance lookup ##
distances = [
    (3, 10, 0.875, 'T-Mobile US, Inc.', 'T MobileU, Inc.'),
    (2, 8, 0.6086956521739131, 'Verizon', 'Verizon Wireless'),
    (1, 10, 0.5, 'AT&T Mobility LLC', 'T MobileU, Inc.'),
    (1, 9, 0.38095238095238093, 'AT&T Mobility LLC', 'AT&T'),
    (3, 8, 0.24242424242424243, 'T-Mobile US, Inc.', 'Verizon Wireless'),
    (1, 8, 0.18181818181818182, 'AT&T Mobility LLC', 'Verizon Wireless'),
    (2, 10, 0.18181818181818182, 'Verizon', 'T MobileU, Inc.'),
    (3, 9, 0.09523809523809523, 'T-Mobile US, Inc.', 'AT&T'),
    (2, 9, 0.0, 'Verizon', 'AT&T')
]

        

## Inputs ##
left = [
    (1, 'AT&T Mobility LLC'),
    (2, 'Verizon'),
    (3, 'T-Mobile US, Inc.')
]
right = [
    (8, 'Verizon Wireless'),
    (9, 'AT&T'),
    (10, 'T MobileU, Inc.')
]

## Expected output ##
expected = [
    (3, 10),
    (2, 8),
    (1, 9)
]

##############################################################################
## Part 3
##############################################################################

# Optimize for correctness


## Edit Distance ##

# Assume you've decided to use Levenshtein/edit distance (actually ratio)
#
# In practice we'd import a library and read the documentation.
#
# For the sake of this question, the distances between all pairs of strings is provided.
#
# Fields are:
# - [ left_id, right_id, similarity, left_name, right_name ]

## Edit distance lookup ##
distances = [
    (3, 11, 0.8823529411764706, 'T-Mobile US, Inc.', 'B Mobile US, Inc.'),
    (3, 10, 0.875, 'T-Mobile US, Inc.', 'T MobileU, Inc.'),
    (5, 12, 0.782608695652174, 'Blaze Wireless', 'Blz Wrlss'),
    (5, 8, 0.6666666666666666, 'Blaze Wireless', 'Verizon Wireless'),
    (2, 8, 0.6086956521739131, 'Verizon', 'Verizon Wireless'),
    (4, 11, 0.5517241379310345, 'Boost Mobile', 'B Mobile US, Inc.'),
    (4, 10, 0.5185185185185185, 'Boost Mobile', 'T MobileU, Inc.'),
    (1, 10, 0.5, 'AT&T Mobility LLC', 'T MobileU, Inc.'),
    (1, 11, 0.4117647058823529, 'AT&T Mobility LLC', 'B Mobile US, Inc.'),
    (1, 9, 0.38095238095238093, 'AT&T Mobility LLC', 'AT&T'),
    (4, 8, 0.35714285714285715, 'Boost Mobile', 'Verizon Wireless'),
    (5, 11, 0.3225806451612903, 'Blaze Wireless', 'B Mobile US, Inc.'),
    (4, 12, 0.2857142857142857, 'Boost Mobile', 'Blz Wrlss'),
    (5, 10, 0.27586206896551724, 'Blaze Wireless', 'T MobileU, Inc.'),
    (3, 8, 0.24242424242424243, 'T-Mobile US, Inc.', 'Verizon Wireless'),
    (1, 8, 0.18181818181818182, 'AT&T Mobility LLC', 'Verizon Wireless'),
    (2, 10, 0.18181818181818182, 'Verizon', 'T MobileU, Inc.'),
    (2, 11, 0.16666666666666666, 'Verizon', 'B Mobile US, Inc.'),
    (1, 12, 0.15384615384615385, 'AT&T Mobility LLC', 'Blz Wrlss'),
    (3, 12, 0.15384615384615385, 'T-Mobile US, Inc.', 'Blz Wrlss'),
    (2, 12, 0.125, 'Verizon', 'Blz Wrlss'),
    (3, 9, 0.09523809523809523, 'T-Mobile US, Inc.', 'AT&T'),
    (2, 9, 0.0, 'Verizon', 'AT&T'),
    (4, 9, 0.0, 'Boost Mobile', 'AT&T'),
    (5, 9, 0.0, 'Blaze Wireless', 'AT&T')
]

        

## Inputs ##
left = [
    (1, 'AT&T Mobility LLC'),
    (2, 'Verizon'),
    (3, 'T-Mobile US, Inc.'),
    (4, 'Boost Mobile'),
    (5, 'Blaze Wireless')
]
right = [
    (8, 'Verizon Wireless'),
    (9, 'AT&T'),
    (10, 'T MobileU, Inc.'),
    (11, 'B Mobile US, Inc.'),
    (12, 'Blz Wrlss')
]

## Expected output ##
expected = [
    (5, 12),
    (4, 11),
    (3, 10),
    (2, 8),
    (1, 9)
]

